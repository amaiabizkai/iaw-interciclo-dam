{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RepuestoService {\n  constructor(http) {\n    this.http = http;\n    this.repuestosAllUrl = 'http://localhost:8000/repuesto';\n    this.repuestosDetailUrl = 'http://localhost:8000/repuesto/details';\n    this.repuestosDeleteUrl = 'http://localhost:8000/repuesto/delete';\n    this.repuestosUpdateUrl = 'http://localhost:8000/repuesto/edit';\n    this.repuestosNewUrl = 'http://localhost:8000/repuesto/new';\n  }\n  //FUNCIONA BIEN\n  //NO MUESTRA UN CONSOLE LOG CON LOS DATOS DE LA API(INTENCIONADO)\n  getRepuestos() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.get(this.repuestosAllUrl, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  // getRepuestos(): Observable<Repuesto[]> {\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   return this.http.get<any>(this.repuestosAllUrl,{headers}).pipe(\n  //     tap((data) => console.log(JSON.stringify(data))),\n  //     catchError(this.handleError)\n  //   );\n  // }\n  //NO COMPROBADO\n  getMaxRepuestoId() {\n    return this.http.get(this.repuestosAllUrl).pipe(\n    // Get max value from an array\n    map(data => Math.max.apply(Math, data.map(function (o) {\n      return o.id;\n    }))), catchError(this.handleError));\n  }\n  //FUNCIONA BIEN\n  getRepuestoById(id) {\n    const url = `${this.repuestosDetailUrl}/${id}`;\n    return this.http.get(url).pipe(tap(data => console.log('getRepuesto: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  //FUNCIONA BIEN\n  createRepuesto(repuesto) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    repuesto.id = 0;\n    return this.http.post(this.repuestosNewUrl, repuesto, {\n      headers: headers\n    }).pipe(tap(data => console.log('createRepuesto: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  //FUNCIONA BIEN\n  deleteRepuesto(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.repuestosDeleteUrl}/${id}`;\n    return this.http.delete(url, {\n      headers: headers\n    }).pipe(tap(data => console.log('deleteRepuesto: ' + id)), catchError(this.handleError));\n  }\n  //NO FUNCIONA\n  updateRepuesto(repuesto) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.repuestosUpdateUrl}/${repuesto.id}`;\n    return this.http.put(url, repuesto, {\n      headers: headers\n    }).pipe(tap(() => console.log('updateRepuesto: ' + repuesto.id)),\n    // Return the repuesto on an update\n    map(() => repuesto), catchError(this.handleError));\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n}\nRepuestoService.ɵfac = function RepuestoService_Factory(t) {\n  return new (t || RepuestoService)(i0.ɵɵinject(i1.HttpClient));\n};\nRepuestoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RepuestoService,\n  factory: RepuestoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","throwError","catchError","tap","map","RepuestoService","constructor","http","getRepuestos","headers","get","repuestosAllUrl","pipe","handleError","getMaxRepuestoId","data","Math","max","apply","o","id","getRepuestoById","url","repuestosDetailUrl","console","log","JSON","stringify","createRepuesto","repuesto","post","repuestosNewUrl","deleteRepuesto","repuestosDeleteUrl","delete","updateRepuesto","repuestosUpdateUrl","put","err","errorMessage","error","ErrorEvent","message","status","body","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Gabriel_C\\Desktop\\MAFAH\\client\\src\\app\\core\\repuesto.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { Repuesto } from '../shared/repuesto';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RepuestoService {\r\n  private repuestosAllUrl = 'http://localhost:8000/repuesto';\r\n  private repuestosDetailUrl = 'http://localhost:8000/repuesto/details';\r\n  private repuestosDeleteUrl = 'http://localhost:8000/repuesto/delete';\r\n  private repuestosUpdateUrl = 'http://localhost:8000/repuesto/edit';\r\n  private repuestosNewUrl = 'http://localhost:8000/repuesto/new';\r\n\r\n\r\n\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  //FUNCIONA BIEN\r\n  //NO MUESTRA UN CONSOLE LOG CON LOS DATOS DE LA API(INTENCIONADO)\r\n  getRepuestos(): Observable<Repuesto[]> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n    return this.http.get<any>(this.repuestosAllUrl,{headers}).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n\r\n  // getRepuestos(): Observable<Repuesto[]> {\r\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n  //   return this.http.get<any>(this.repuestosAllUrl,{headers}).pipe(\r\n  //     tap((data) => console.log(JSON.stringify(data))),\r\n  //     catchError(this.handleError)\r\n  //   );\r\n  // }\r\n  \r\n  //NO COMPROBADO\r\n  getMaxRepuestoId(): Observable<number> {\r\n    return this.http.get<Repuesto[]>(this.repuestosAllUrl).pipe(\r\n      // Get max value from an array\r\n      map((data) =>\r\n        Math.max.apply(\r\n          Math,\r\n          data.map(function (o) {\r\n            return o.id;\r\n          })\r\n        )\r\n      ),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  //FUNCIONA BIEN\r\n  getRepuestoById(id: number): Observable<Repuesto> {\r\n    const url = `${this.repuestosDetailUrl}/${id}`;\r\n    return this.http.get<Repuesto>(url).pipe(\r\n      tap((data) => console.log('getRepuesto: ' + JSON.stringify(data))),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  //FUNCIONA BIEN\r\n  createRepuesto(repuesto: Repuesto): Observable<Repuesto> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    repuesto.id = 0;\r\n    return this.http\r\n      .post<Repuesto>(this.repuestosNewUrl, repuesto, { headers: headers })\r\n      .pipe(\r\n        tap((data) => console.log('createRepuesto: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  //FUNCIONA BIEN\r\n  deleteRepuesto(id: number): Observable<{}> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    const url = `${this.repuestosDeleteUrl}/${id}`;\r\n    return this.http.delete<Repuesto>(url, { headers: headers }).pipe(\r\n      tap((data) => console.log('deleteRepuesto: ' + id)),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  //NO FUNCIONA\r\n  updateRepuesto(repuesto: Repuesto): Observable<Repuesto> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    const url = `${this.repuestosUpdateUrl}/${repuesto.id}`;\r\n    return this.http.put<Repuesto>(url, repuesto,   { headers: headers }).pipe(\r\n      tap(() => console.log('updateRepuesto: ' + repuesto.id)),\r\n      // Return the repuesto on an update\r\n      map(() => repuesto),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(err: any) {\r\n    // in a real world app, we may send the server to some remote logging infrastructure\r\n    // instead of just logging it to the console\r\n    let errorMessage: string;\r\n    if (err.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      errorMessage = `An error occurred: ${err.error.message}`;\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\r\n    }\r\n    console.error(err);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}